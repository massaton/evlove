package org.evlove.common.core.robj;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.evlove.common.core.pojo.BasePojo;
import org.evlove.common.core.rcode.CommonReturnCode;

/**
 * The base class of the outermost VO wrapper object (Return**VO)
 *
 * Note: The use of generics is to limit the code generated by @SuperBuilder,
 *       otherwise subclasses and parent classes will generate different constructors
 *
 * @author massaton.github.io
 */
@ToString
public class AbstractReturnVO<T> extends BasePojo {
    @Schema(description = "Return code")
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private Integer code;

    @Schema(description = "Information corresponding to the return code")
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private String msg;

    /**
     * Determine whether the interface call is normal
     *
     * It is convenient to judge whether the result returned by the interface is correct when the remote interface is called.
     */
    public boolean successful() {
        return CommonReturnCode.SUCCESS.getCode().equals(this.code);
    }
}
